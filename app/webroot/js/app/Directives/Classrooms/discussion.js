// Generated by CoffeeScript 1.7.1
(function () {
  angular.module('Pyoopil.Directives').controller('discussionCtrl', [
    '$scope', 'discussionService', 'Notify',
    function ($scope, discussionService, Notify) {
      var DiscussionCtrl;
      return new(DiscussionCtrl = (function () {
        function DiscussionCtrl() {}

        DiscussionCtrl.prototype.addReply = function (evt, scope) {
          var data;
          if (evt.keyCode !== 13) {

          } else {
            data = {
              'discussion_id': scope.discussion.Discussion.id,
              'comment': scope.comment
            };
            return discussionService.postForm('addReply.json', data, function (data) {
              this.emit('UPDATE.Scroll');
              return this.emit('READ.Replies', data, scope);
            });
          }
        };

        DiscussionCtrl.prototype.setGamification = function (praise) {
          var data;
          data = {
            "id": praise.id,
            "type": praise.type,
            "vote": praise.praise
          };
          return discussionService.postForm('setGamificationVote.json', data, function (data) {
            return Notify.alert('You successfully Voted', 'success');
          });
        };

        DiscussionCtrl.prototype.votePoll = function (vote, scope) {
          var data, poll;
          if (scope.canVote) {

          } else {
            poll = _.findWhere(scope.discussion.Pollchoice, {
              id: vote
            });
            poll.votes++;
            this.renderChart(scope);
            scope.canVote = true;
            data = {
              'pollchoice_id': vote
            };
            return discussionService.postForm('setPollVote.json', data, function (data) {
              return Notify.alert('You successfully Voted', 'success');
            });
          }
        };

        DiscussionCtrl.prototype.renderChart = function (scope) {
          var poll;
          poll = [];
          angular.forEach(scope.discussion.Pollchoice, function (pollChoice) {
            var vote;
            vote = [];
            vote.push({
              v: pollChoice.choice
            });
            vote.push({
              v: pollChoice.votes
            });
            return poll.push({
              c: vote
            });
          });
          return scope.chartObject.data = {
            "cols": [{
              id: 't',
              label: "Choices",
              type: "string"
            }, {
              id: 's',
              label: "Votes",
              type: "number"
            }],
            "rows": poll
          };
        };

        DiscussionCtrl.prototype.removeDiscussion = function (scope) {
          var data, id;
          id = scope.discussion.Discussion.id;
          scope.$emit('REMOVE.Discussion', id);
          data = {
            type: 'Discussion',
            id: id
          };
          return discussionService.postForm('delete.json', data, function (data) {
            this.emit('UPDATE.Scroll');
            return Notify.alert('You successfully Deleted the Discussion', 'success');
          });
        };

        DiscussionCtrl.prototype.foldDiscussion = function (scope) {
          scope.discussion.Discussion.isFolded = !scope.discussion.Discussion.isFolded;
          return discussionService.postForm('togglefold.json', {
            id: scope.discussion.Discussion.id
          }, function (data) {
            return Notify.alert('You successfully Folded the Discussion', 'success');
          });
        };

        return DiscussionCtrl;

      })());
    }
  ]).directive('discussion', [
    'EventEmitter', 'Notify', '$sce', 'discussionService', '$timeout',
    function (EventEmitter, Notify, $sce, discussionService, $timeout) {
      return {
        restrict: 'A',
        scope: {
          discussion: '='
        },
        controller: 'discussionCtrl',
        templateUrl: '/pyoopil/js/app/partials/classrooms/discussion-tile.html',
        link: function (scope, elem, attrs, ctrl) {
          var Discussions;
          return new(Discussions = (function () {
            function Discussions() {
              scope.discussion.Discussion.body = $sce.trustAsHtml(scope.discussion.Discussion.body);
              scope.replies = scope.discussion.Reply;
              scope.chartObject = {};
              scope.chartObject.type = 'BarChart';
              ctrl.renderChart(scope);
              scope.canVote = scope.discussion.Discussion.showPollVote;
              scope.addReply = function (evt) {
                return ctrl.addReply(evt, scope);
              };
              scope.votePoll = function (poll) {
                return ctrl.votePoll(poll, scope);
              };
              scope.removeDiscussion = function () {
                return ctrl.removeDiscussion(scope);
              };
              scope.foldDiscussion = function () {
                return ctrl.foldDiscussion(scope);
              };
              $timeout(function () {
                if (scope.$parent.$last) {
                  return discussionService.rendered();
                }
              }, 100);
              scope.$on('UPDATE.Praise', function (e, data) {
                return ctrl.setGamification(data);
              });
            }

            return Discussions;

          })());
        }
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=discussion.map